
int Font_NumRed;
int Font_NumBlue;

int P1StackPosX;   // Position of the play area on the screen
int P1StackPosY;

int P1ScoreDisplay;
int P1ScoreRender;
int P1ScoreDigits[5];

int GameTimeDisplay;
int GameTimeDisplayPosX;
int GameTimeDisplayPosY;
int GameTimeRender;
int GameTimeDigits[7];

int Graphics_TIME;

int Graphics_Ready321;

int P1SpeedLVDisplay;
int P1SpeedLVRender;
int P1SpeedLVDigits[3];
int MrStopState;
int MrStopTimer;
int MrStopAni[25];

int Graphics_level;
int Graphics_MrStop[2];
int Graphics_Difficulty[5];

int Graphics_Panels[9];
int Graphics_Cursor[2];

int bouncetable[13];
int dangerbouncetable[30];

int TimeSlideAni[65];

int CardAni[50];
int Graphics_ComboCards;
int Graphics_ChainCards;
int ComboCardsQueue[50];
int ComboCardsQueueLength;
int ChainCards16Queue[50];
int ChainCards16QueueLength;
int ChainCards21Queue[50];
int ChainCards21QueueLength;



int NumConfettis;
#define MAXCONFETTIS     8

int Confettis[8][5];
#define CONFETTI_TIMER   0
#define CONFETTI_RADIUS  1
#define CONFETTI_ANGLE   2
#define CONFETTI_X       3
#define CONFETTI_Y       4
int ConfettiAni[48];
int ConfettiBuf[6][2];
#define CONFETTI_STARTTIMER   40
#define CONFETTI_STARTRADIUS 150


int Graphics_Controller;
int Graphics_Controller_Up;
int Graphics_Controller_Down;
int Graphics_Controller_Left;
int Graphics_Controller_Right;
int Graphics_Controller_ABXY;
int Graphics_Controller_L;
int Graphics_Controller_R;



void Graphics_Init()
{
   int a;
   int file;
   
   Font_NumRed=LoadImage("graphics\Font_NumRed.bmp");
   Font_NumBlue=LoadImage("graphics\Font_NumBlue.bmp");

   GameTimeDisplay=NewImage(64,16);
   P1ScoreDisplay=NewImage(40,16);
   P1SpeedLVDisplay=NewImage(48,48);

   Graphics_Ready321=LoadImage("graphics\Ready321.bmp");
   Graphics_TIME=LoadImage("graphics\time.bmp");
   Graphics_level=LoadImage("graphics\level.bmp");
   for(a=0;a<2;a++) Graphics_MrStop[a]=LoadImage("graphics\MrStop"+str(a)+".bmp");
   for(a=0;a<5;a++) Graphics_Difficulty[a]=LoadImage("graphics\diffic"+str(a)+".bmp");

   for(a=0;a<9;a++)
      Graphics_Panels[a]=LoadImage("graphics\panel0"+str(a)+".bmp");
   for(a=0;a<2;a++)
      Graphics_Cursor[a]=LoadImage("graphics\cur"+str(a)+".bmp");

   Graphics_ComboCards=LoadImage("graphics\combocards.bmp");
   Graphics_ChainCards=LoadImage("graphics\ChainCards.bmp");


   for(a=1; a<4; a++) bouncetable[a]=0;
   for(a=4; a<7; a++) bouncetable[a]=1;
   for(a=7; a<10;a++) bouncetable[a]=2;
   for(a=10;a<13;a++) bouncetable[a]=3;

   for( a=0; a<3;a++)  dangerbouncetable[a]=0;
   for( a=3; a<6;a++)  dangerbouncetable[a]=1;
   for( a=6; a<9;a++)  dangerbouncetable[a]=2;
   for( a=9;a<12;a++)  dangerbouncetable[a]=1;
   for(a=12;a<15;a++)  dangerbouncetable[a]=0;
   for(a=15;a<18;a++)  dangerbouncetable[a]=3;

   for(a=0;a<2;a++) MrStopAni[a]=5;
   for(a=2;a<5;a++) MrStopAni[a]=8;
   for(a=5;a<25;a++) MrStopAni[a]=16;

   file=FileOpen("graphics\Card.ani",FILE_READ);
   for(a=0;a<TMOL;a++)
   {
      CardAni[a] = FileReadByte(file);
   }
   FileClose(file);
   file=FileOpen("graphics\timeslide.ani",FILE_READ);
   for(a=1;a<65;a++)
   {
      TimeSlideAni[a] = FileReadByte(file);
   }
   FileClose(file);
   file=FileOpen("graphics\confetti.ani",FILE_READ);
   for(a=0;a<40;a++)
   {
      ConfettiAni[a] = FileReadByte(file);
   }
   FileClose(file);

   Graphics_Controller=LoadImage("graphics\controller.bmp");
   Graphics_Controller_Up=LoadImage("graphics\controller_Up.bmp");
   Graphics_Controller_Down=LoadImage("graphics\controller_Down.bmp");
   Graphics_Controller_Left=LoadImage("graphics\controller_Left.bmp");
   Graphics_Controller_Right=LoadImage("graphics\controller_Right.bmp");
   Graphics_Controller_ABXY=LoadImage("graphics\controller_ABXY.bmp");
   Graphics_Controller_L=LoadImage("graphics\controller_L.bmp");
   Graphics_Controller_R=LoadImage("graphics\controller_R.bmp");

}



void Graphics_ShutDown()
{
   int a;

   FreeImage(Font_NumRed);
   FreeImage(Font_NumBlue);

   FreeImage(GameTimeDisplay);
   FreeImage(P1ScoreDisplay);
   FreeImage(P1SpeedLVDisplay);

   FreeImage(Graphics_Ready321);
   FreeImage(Graphics_TIME);
   FreeImage(Graphics_level);
   for(a=0;a<2;a++) FreeImage(Graphics_MrStop[a]);
   for(a=0;a<5;a++) FreeImage(Graphics_Difficulty[a]);

   for(a=0;a<9;a++)
      FreeImage(Graphics_Panels[a]);
   for(a=0;a<2;a++)
      FreeImage(Graphics_Cursor[a]);

   FreeImage(Graphics_ComboCards);
   FreeImage(Graphics_ChainCards);

}



void EnqueueComboCard(int xpos, int ypos, int iofs)
{
   // (animation frame) <<19
   // xpos              4 bits
   // ypos              4 bits
   // iofs              11 bits
   ComboCardsQueue[ComboCardsQueueLength]=(xpos<<15) | (ypos<<11) | iofs;
   ComboCardsQueueLength++;
}



void DrawComboCards()
{
   int i;
   int card, aniframe, drawx, drawy, iofs;
   int slide;
   for(i=0;i<ComboCardsQueueLength;i++)
   {
      card=ComboCardsQueue[i];

      aniframe=card>>19;

      drawx=card>>15;
      drawx=drawx&15;
      drawx=drawx<<4;
      drawx+=P1StackPosX;

      drawy=card>>11;
      drawy=drawy&15;
      drawy=drawy<<4;
      drawy+=P1StackPosY+P1StackDisplacement;
      drawy-=CardAni[aniframe];

      iofs=card&2047;

      TGrabRegion(iofs,0,iofs+15,15,drawx,drawy,Graphics_ComboCards,screen);

      aniframe++;
      if(aniframe==TMOL) slide=1;
      else ComboCardsQueue[i]+=524288;
   }
   if(slide)
   {
      for(i=0;i<ComboCardsQueueLength;i++) ComboCardsQueue[i]=ComboCardsQueue[i+1];
      ComboCardsQueueLength--;
   }
}



void EnqueueChainCard(int xpos, int ypos, int hitno)
{
   // (animation frame) <<19
   // xpos              4 bits
   // ypos              4 bits
   // iofs              11 bits
   int tens, ones;
   int something;
   something=hitno;

   if(something>13)
      if(ScoreMode==SCOREMODE_TA) something=0;

   if(something<20)
   {
      ChainCards16Queue[ChainCards16QueueLength]
         =(xpos<<15) | (ypos<<11) | something;
      ChainCards16QueueLength++;
   }
   else
   {
      tens=something/10;
      ones=something-(tens*10);
      ChainCards21Queue[ChainCards21QueueLength]
         =(xpos<<15) | (ypos<<11) | (tens<<4) | ones;
      ChainCards21QueueLength++;
   }
}

void DrawChainCards16()
{
   int i;
   int card, aniframe, drawx, drawy, hitno;
   int slide;
   for(i=0;i<ChainCards16QueueLength;i++)
   {
      card=ChainCards16Queue[i];

      aniframe=card>>19;

      drawx=card>>15;
      drawx=drawx&15;
      drawx=drawx<<4;
      drawx+=P1StackPosX;

      drawy=card>>11;
      drawy=drawy&15;
      drawy=drawy<<4;
      drawy+=P1StackPosY+P1StackDisplacement;
      drawy-=CardAni[aniframe];

      hitno=card&2047;
      hitno=hitno<<4;

      TGrabRegion(hitno,0,hitno+15,15,drawx,drawy,Graphics_ChainCards,screen);

      aniframe++;
      if(aniframe==TMOL) slide=1;
      else ChainCards16Queue[i]+=524288;
   }
   if(slide)
   {
      for(i=0;i<ChainCards16QueueLength;i++) ChainCards16Queue[i]=ChainCards16Queue[i+1];
      ChainCards16QueueLength--;
   }
}

void DrawChainCards21()
{
   int i;
   int card, aniframe, drawx, drawy, tens, ones;
   int slide;
   for(i=0;i<ChainCards21QueueLength;i++)
   {
      card=ChainCards21Queue[i];

      aniframe=card>>19;

      drawx=card>>15;
      drawx=drawx&15;
      drawx=drawx<<4;
      drawx+=P1StackPosX;

      drawy=card>>11;
      drawy=drawy&15;
      drawy=drawy<<4;
      drawy+=P1StackPosY+P1StackDisplacement;
      drawy-=CardAni[aniframe];

      tens=card&240;
      ones=card&15;
      ones=ones<<4;
      TGrabRegion(tens,16,tens+13, 31,drawx -3,drawy,Graphics_ChainCards,screen);
      TGrabRegion(ones,32,ones +6, 47,drawx+11,drawy,Graphics_ChainCards,screen);

      aniframe++;
      if(aniframe==TMOL) slide=1;
      else ChainCards21Queue[i]+=524288;
   }
   if(slide)
   {
      for(i=0;i<ChainCards21QueueLength;i++) ChainCards21Queue[i]=ChainCards21Queue[i+1];
      ChainCards21QueueLength--;
   }
}




void Render_1P()
{
   int row, col, panel;
   int drawpanel, drawframe, drawx, drawy;
   int something, whatever;


   Count_ActivePanels=0;
   for(row=0;row<12;row++)
   {
      panel=row<<3;
      for(col=0;col<6;col++)
      {
         whatever=P1StackFlags[panel];
         something=0;
         if(P1StackPanels[panel])
         {
            if(whatever & FLAG_SWAPPING) something=1;
            else
            {  if(whatever & FLAG_MATCHED) something=1;
               else
               {  if(whatever & FLAG_POPPING) something=1;
                  else
                  {  if(whatever & FLAG_POPPED) something=1;
                     else
                     {  if(whatever & FLAG_HOVERING) something=1;
                        else
                           if(whatever & FLAG_FALLING) something=1;
                     }
                  }
               }
            }
         }
         else if(whatever & FLAG_SWAPPING) something=1;
         if(something) Count_ActivePanels++;

         if(P1StackPanels[panel])
         {
            if(!(P1StackFlags[panel] & FLAG_POPPED))
            {
               drawpanel=P1StackPanels[panel];
               drawframe=0;
               drawx=col<<4+P1StackPosX;
               drawy=row<<4+P1StackPosY+P1StackDisplacement;
               if(P1StackFlags[panel] & FLAG_MATCHED)
               {  if(P1StackTimers[panel] < FRAMECOUNT_FLASH)
                     drawframe=5;
                  else
                  {  if(P1StackTimers[panel] & 1) drawframe=4;
                     else drawframe=0;
                  }
               }
               else
               {  if(P1StackFlags[panel] & FLAG_POPPING)
                     drawframe=5;
                  else
                  {  if(P1StackFlags[panel] & FLAG_LANDING)
                        drawframe=bouncetable[P1StackTimers[panel]];
                     else
                     {  if(P1StackFlags[panel] & FLAG_SWAPPING)
                        {
                           if(P1StackFlags[panel] & FLAG_FROMLEFT)
                              something=0-(P1StackTimers[panel]<<2);
                           else
                              something=P1StackTimers[panel]<<2;
                           drawx+=something;
                        }
                        else
                        {  if(row<=bottomrow) something=1;
                           else something=0;
                           if(P1DangerCol[col] && something)
                              drawframe=dangerbouncetable[P1DangerTimer];
                           else
                           {
                              if(P1StackFlags[panel] & FLAG_DIMMED)
                                 drawframe=6;
                              else
                                 drawframe=0;
                           }
                        }
                     }
                  }
               }
               drawframe=drawframe<<4;
               GrabRegion(drawframe,0,drawframe+15,15,drawx,drawy,
                          Graphics_Panels[drawpanel],screen);
            }
         }
         panel++;
      }
   }


}

void EnqueueConfetti(int x, int y)
{
   int b, c;
   if(NumConfettis==MAXCONFETTIS)
   {
      for(c=0;c<NumConfettis;c++)
      {
         for(b=0;b<5;b++) Confettis[c][b]=Confettis[c+1][b];
      }
      NumConfettis--;
   }
   Confettis[NumConfettis][CONFETTI_TIMER]=CONFETTI_STARTTIMER;
   Confettis[NumConfettis][CONFETTI_RADIUS]=CONFETTI_STARTRADIUS;
   Confettis[NumConfettis][CONFETTI_ANGLE]=0;
   Confettis[NumConfettis][CONFETTI_X]=x;
   Confettis[NumConfettis][CONFETTI_Y]=y;
   NumConfettis++;
}

void Render_Confetti()
{
   int a, b, c; 
   int r, an, t;

   for(a=0;a<NumConfettis;a++)
   {
      t=Confettis[a][CONFETTI_TIMER]-1;
      r=Confettis[a][CONFETTI_RADIUS]-ConfettiAni[t];
      an=Confettis[a][CONFETTI_ANGLE]-6;

      ConfettiBuf[0][0]=(r*cos(an))>>16;
      ConfettiBuf[0][1]=(r*sin(an))>>16;
      ConfettiBuf[1][0]=(r*cos(an+60))>>16;
      ConfettiBuf[1][1]=(r*sin(an+60))>>16;
      ConfettiBuf[2][0]=(r*cos(an+120))>>16;
      ConfettiBuf[2][1]=(r*sin(an+120))>>16;
      for(c=0;c<3;c++)
      {
         ConfettiBuf[c+3][0]=0-ConfettiBuf[c][0];
         ConfettiBuf[c+3][1]=0-ConfettiBuf[c][1];
      }
      for(c=0;c<6;c++)
      {
         ConfettiBuf[c][0]+=Confettis[a][CONFETTI_X];
         ConfettiBuf[c][1]+=Confettis[a][CONFETTI_Y];

         TBlit(ConfettiBuf[c][0],ConfettiBuf[c][1],Graphics_Confetti,screen);
      }

      if(!t)
      {
         for(c=a;c<NumConfettis;c++)
         {
            for(b=0;b<5;b++) Confettis[c][b]=Confettis[c+1][b];
         }
         NumConfettis--;
         if(a!=(NumConfettis-1)) a--;
      }
      else
      {
         Confettis[a][CONFETTI_TIMER]=t;
         Confettis[a][CONFETTI_RADIUS]=r;
         Confettis[a][CONFETTI_ANGLE]=an;
      }
   }

}


void Render_Cards()
{
   DrawComboCards();
   DrawChainCards16();
   DrawChainCards21();
}

void Render_Cursor()
{
   TBlit(P1CurCol<<4+P1StackPosX-4, P1CurRow<<4+P1StackPosY-4+P1StackDisplacement,
         Graphics_Cursor[CLOCK&16>>4],screen);
}



void FadingPanels_1P(int drawframe, int lightness)
{
   int col, row, panel;
   int drawpanel, drawx, drawy;

   for(row=0;row<12;row++)
   {
      panel=row<<3;
      for(col=0;col<6;col++)
      {   
         drawpanel=P1StackPanels[panel];
         if(drawpanel)
         {
            drawx=P1StackPosX+(col<<4);
            drawy=P1StackPosY+P1StackDisplacement+(row<<4);
            GrabRegion(drawframe<<4,0,drawframe<<4+15,15,drawx,drawy,
               Graphics_Panels[drawpanel],screen);
            if(lightness!=100)
            {
               SetLucent(lightness);
               RectFill(drawx,drawy,drawx+15,drawy+15,0,screen);
               SetLucent(0);
            }
         }
         panel++;
      }
   }
}



void Render_Info_1P()
{
   int col, something, drawx;
   if(GameTimeRender)
   {
      GameTimeRender=0;
      something=GameTime;
      GameTimeDigits[0]=something/36000;
      something=something%36000;
      GameTimeDigits[1]=something/3600;
      something=something%3600;

      GameTimeDigits[2]=something/600;
      something=something%600;
      GameTimeDigits[3]=something/60;
      something=something%60;

      GameTimeDigits[4]=10;
      GameTimeDigits[5]=something/10;
      GameTimeDigits[6]=something%10;

      RectFill(0,0,64,16,rgb(255,0,255),GameTimeDisplay);

      if(GameTimeDigits[0]) drawx=0;
      else drawx=0-8;
      something=0;
      for(col=0;col<2;col++)
      {  if(GameTimeDigits[col])
         {  GrabRegion(GameTimeDigits[col]<<3,0,(GameTimeDigits[col]<<3)+7,15,drawx,0,Font_NumRed,GameTimeDisplay);
            something=1;
         }
         else
         {  if(something) GrabRegion(GameTimeDigits[col]<<3,0,(GameTimeDigits[col]<<3)+7,15,drawx,0,Font_NumRed,GameTimeDisplay);
         }
         drawx+=8;
      }
      if(something) GrabRegion(80,0,87,15,drawx,0,Font_NumRed,GameTimeDisplay);
      drawx+=8;
      if(something || GameTimeDigits[2])
         GrabRegion(GameTimeDigits[2]<<3,0,(GameTimeDigits[2]<<3)+7,15,drawx,0,Font_NumRed,GameTimeDisplay);
      drawx+=8;
      for(col=3;col<7;col++)
      {  GrabRegion(GameTimeDigits[col]<<3,0,(GameTimeDigits[col]<<3)+7,15,drawx,0,Font_NumRed,GameTimeDisplay);
         drawx+=8;
      }
   }

   TBlit(48,39,GameTimeDisplay,screen);



   if(P1ScoreRender)
   {
      P1ScoreRender=0;
      something=P1Score;
      P1ScoreDigits[0]=something/10000;
      something=something%10000;
      P1ScoreDigits[1]=something/1000;
      something=something%1000;
      P1ScoreDigits[2]=something/100;
      something=something%100;
      P1ScoreDigits[3]=something/10;
      P1ScoreDigits[4]=something%10;

      RectFill(0,0,40,16,rgb(255,0,255),P1ScoreDisplay);
      drawx=0;
      something=0;
      for(col=0;col<4;col++)
      {
         if(P1ScoreDigits[col])
         {
            GrabRegion(P1ScoreDigits[col]<<3,0,(P1ScoreDigits[col]<<3)+7,15,drawx,0,Font_NumBlue,P1ScoreDisplay);
            something=1;
         }
         else
         {
            if(something) GrabRegion(P1ScoreDigits[col]<<3,0,(P1ScoreDigits[col]<<3)+7,15,drawx,0,Font_NumBlue,P1ScoreDisplay);
         }
         drawx+=8;
      }
      col=4;
      GrabRegion(P1ScoreDigits[col]<<3,0,(P1ScoreDigits[col]<<3)+7,15,drawx,0,Font_NumBlue,P1ScoreDisplay);      
   }

   TBlit(232,63,P1ScoreDisplay,screen);


   if(P1StopTime)
   {
      MrStopTimer--;
      if(MrStopTimer<=0)
      {
         MrStopTimer=MrStopAni[P1StopTime];
         if(MrStopState) MrStopState=0;
         else MrStopState=1;
         P1SpeedLVRender=1;
      }
   }
   if(P1SpeedLVRender)
   {
      RectFill(0,0,48,48,rgb(255,0,255),P1SpeedLVDisplay);
      if(P1StopTime)
      {
         Blit(0,0,Graphics_MrStop[MrStopState],P1SpeedLVDisplay);
         if(MrStopState)
         {
            P1SpeedLVDigits[0]=P1StopTime/10;
            P1SpeedLVDigits[1]=P1StopTime%10;
            GrabRegion(P1SpeedLVDigits[0]<<3,0,(P1SpeedLVDigits[0]<<3)+7,15, 0,0,Font_NumRed,P1SpeedLVDisplay);
            GrabRegion(P1SpeedLVDigits[1]<<3,0,(P1SpeedLVDigits[1]<<3)+7,15, 8,0,Font_NumRed,P1SpeedLVDisplay);
         }
      }
      else
      {
         P1SpeedLVDigits[0]=P1SpeedLV/10;
         P1SpeedLVDigits[1]=P1SpeedLV%10;
         if(P1SpeedLVDigits[0]) GrabRegion(P1SpeedLVDigits[0]<<3,0,(P1SpeedLVDigits[0]<<3)+7,15, 32,2,Font_NumBlue,P1SpeedLVDisplay);
         GrabRegion(P1SpeedLVDigits[1]<<3,0,(P1SpeedLVDigits[1]<<3)+7,15, 40,2,Font_NumBlue,P1SpeedLVDisplay);
         Blit(1,25,Graphics_level,P1SpeedLVDisplay);
         Blit(1,35,Graphics_Difficulty[P1DifficultyLV],P1SpeedLVDisplay);
      }
   }

   TBlit(224,95,P1SpeedLVDisplay,screen);
}



void Render_Controller()
{
   TBlit(234,165,Graphics_Controller,screen);

   if(key[Keyboard_Up])     TBlit(247,179,Graphics_Controller_Up,screen);
   if(key[Keyboard_Down])   TBlit(247,192,Graphics_Controller_Down,screen);
   if(key[Keyboard_Left])   TBlit(240,186,Graphics_Controller_Left,screen);
   if(key[Keyboard_Right])  TBlit(254,186,Graphics_Controller_Right,screen);

   if(key[Keyboard_Swap1])  TBlit(283,193,Graphics_Controller_ABXY,screen);
   if(key[Keyboard_Swap2])  TBlit(289,187,Graphics_Controller_ABXY,screen);
   if(key[Keyboard_Raise1]) TBlit(240,165,Graphics_Controller_L,screen);
   if(key[Keyboard_Raise2]) TBlit(278,165,Graphics_Controller_R,screen);

}